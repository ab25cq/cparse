rm -f parser.c parser.h parser.output lexer.c cparse *.o
[Bison] c.y -> parser.c, parser.h
bison -d -v --defines=parser.h -o parser.c c.y
c.y:630.5-34: warning: unused value: $3
c.y: warning: 4 useless nonterminals and 8 useless rules
c.y:448.1-11: warning: useless nonterminal: declaration
c.y:449.28-51: warning: useless nonterminal: init_declarator_list_opt
c.y:453.5-24: warning: useless nonterminal: init_declarator_list
c.y:457.5-19: warning: useless nonterminal: init_declarator
c.y:449.5-51: warning: useless rule: declaration: declaration_specifiers init_declarator_list_opt
c.y:451.25: warning: useless rule: init_declarator_list_opt: /* empty */
c.y:453.5-24: warning: useless rule: init_declarator_list_opt: init_declarator_list
c.y:457.5-19: warning: useless rule: init_declarator_list: init_declarator
c.y:458.5-44: warning: useless rule: init_declarator_list: init_declarator_list ',' init_declarator
c.y:462.5-14: warning: useless rule: init_declarator: declarator
c.y:463.5-40: warning: useless rule: init_declarator: declarator '=' assignment_expression
c.y:464.5-30: warning: useless rule: init_declarator: declarator '=' initializer
c.y: conflicts: 166 shift/reduce, 5 reduce/reduce
c.y:256.4: warning: rule never reduced because of conflicts: external_declaration: /* empty */
c.y:623.20: warning: rule never reduced because of conflicts: identifier_list_opt: /* empty */
cc -O2 -g -Wall -Wextra -DYYDEBUG -I/opt/homebrew/opt/binutils/include  -c -o parser.o parser.c
[Flex ] c.l -> lexer.c
flex -o lexer.c c.l
cc -O2 -g -Wall -Wextra -DYYDEBUG -I/opt/homebrew/opt/binutils/include  -c -o lexer.o lexer.c
lexer.c:1695:38: warning: comparison of integers of different signs: 'yy_size_t' (aka 'unsigned long') and 'int' [-Wsign-compare]
 1695 |         if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
lexer.c:1774:17: warning: unused function 'yyunput' [-Wunused-function]
 1774 |     static void yyunput (int c, char * yy_bp )
      |                 ^~~~~~~
lexer.c:1821:16: warning: function 'input' is not needed and will not be emitted [-Wunneeded-internal-declaration]
 1821 |     static int input  (void)
      |                ^~~~~
3 warnings generated.
cc -O2 -g -Wall -Wextra -DYYDEBUG -I/opt/homebrew/opt/binutils/include  -c -o main.o main.c
cc -O2 -g -Wall -Wextra -DYYDEBUG -I/opt/homebrew/opt/binutils/include  -c -o ast.o ast.c
ast.c:322:24: warning: unused variable 'expr' [-Wunused-variable]
  322 |         const AstNode* expr = ((const AstNode* const*)((const char*)n + sizeof(AstKind)))[0];
      |                        ^~~~
1 warning generated.
cc -O2 -g -Wall -Wextra -DYYDEBUG -I/opt/homebrew/opt/binutils/include  -c -o typedefs.o typedefs.c
cc -O2 -g -Wall -Wextra -DYYDEBUG -o cparse parser.o lexer.o main.o ast.o typedefs.o
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 70
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 31
Entering state 72
Next token is token IDENTIFIER ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token ',' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Next token is token ',' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31
Entering state 75
Next token is token ',' ()
Shifting token ',' ()
Entering state 107
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107
Entering state 187
Next token is token '(' ()
Shifting token '(' ()
Entering state 102
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 31 75 107 187 102
Entering state 72
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 187 102
Entering state 187
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 286
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 187 102 187
Entering state 103
Reading a token: Next token is token ')' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 75 107 187 102
Entering state 188
Next token is token ')' ()
Shifting token ')' ()
Entering state 287
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 367
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 75 107 187 102 188 287 367
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 75 107 187 102 188 287 367
Entering state 400
Reading a token: Next token is token ',' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 187 102 188 287 367 400
Entering state 425
Next token is token ',' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 31 75 107 187 102 188 287 367
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 31 75 107 187 102 188 287 367
Entering state 402
Next token is token ',' ()
Shifting token ',' ()
Entering state 427
Reading a token: Next token is token KW_CHAR ()
Shifting token KW_CHAR ()
Entering state 5
Reducing stack by rule 53 (line 498):
   $1 = token KW_CHAR ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 75 107 187 102 188 287 367 402 427
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 75 107 187 102 188 287 367 402 427
Entering state 400
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 31 75 107 187 102 188 287 367 402 427 400
Entering state 72
Reading a token: Next token is token ')' ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 187 102 188 287 367 402 427 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 31 75 107 187 102 188 287 367 402 427
Entering state 439
Reducing stack by rule 112 (line 647):
   $1 = nterm fp_param_list ()
   $2 = token ',' ()
   $3 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 31 75 107 187 102 188 287 367
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 31 75 107 187 102 188 287 367
Entering state 401
Next token is token ')' ()
Shifting token ')' ()
Entering state 426
Reducing stack by rule 140 (line 781):
   $1 = token '(' ()
   $2 = nterm sdecl ()
   $3 = token ')' ()
   $4 = token '(' ()
   $5 = nterm fp_param_list_opt ()
   $6 = token ')' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 187
Entering state 103
Reading a token: Next token is token ',' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 75 107
Entering state 193
Reducing stack by rule 135 (line 769):
-> $$ = nterm sdecl_list ()
Stack now 0 1 31 75 107 193
Entering state 298
Next token is token ',' ()
Shifting token ',' ()
Entering state 375
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 193 298 375
Entering state 187
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 286
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 193 298 375 187
Entering state 103
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 193 298 375 187
Entering state 103
Reading a token: Next token is token ',' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 75 107 193 298 375
Entering state 409
Reducing stack by rule 136 (line 770):
   $1 = nterm sdecl_list ()
   $2 = token ',' ()
   $3 = nterm sdecl ()
-> $$ = nterm sdecl_list ()
Stack now 0 1 31 75 107 193
Entering state 298
Next token is token ',' ()
Shifting token ',' ()
Entering state 375
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 193 298 375
Entering state 187
Next token is token '(' ()
Shifting token '(' ()
Entering state 102
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 31 75 107 193 298 375 187 102
Entering state 72
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 193 298 375 187 102
Entering state 187
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 286
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 193 298 375 187 102 187
Entering state 103
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 193 298 375 187 102 187
Entering state 103
Reading a token: Next token is token ')' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 75 107 193 298 375 187 102
Entering state 188
Next token is token ')' ()
Shifting token ')' ()
Entering state 287
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 367
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 75 107 193 298 375 187 102 188 287 367
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 75 107 193 298 375 187 102 188 287 367
Entering state 400
Reading a token: Next token is token ')' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 193 298 375 187 102 188 287 367 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 31 75 107 193 298 375 187 102 188 287 367
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 31 75 107 193 298 375 187 102 188 287 367
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 31 75 107 193 298 375 187 102 188 287 367
Entering state 401
Next token is token ')' ()
Shifting token ')' ()
Entering state 426
Reducing stack by rule 140 (line 781):
   $1 = token '(' ()
   $2 = nterm sdecl ()
   $3 = token ')' ()
   $4 = token '(' ()
   $5 = nterm fp_param_list_opt ()
   $6 = token ')' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 193 298 375 187
Entering state 103
Reading a token: Next token is token ';' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 75 107 193 298 375
Entering state 409
Reducing stack by rule 136 (line 770):
   $1 = nterm sdecl_list ()
   $2 = token ',' ()
   $3 = nterm sdecl ()
-> $$ = nterm sdecl_list ()
Stack now 0 1 31 75 107 193
Entering state 298
Next token is token ';' ()
Shifting token ';' ()
Entering state 376
Reducing stack by rule 7 (line 240):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token ',' ()
   $4 = nterm sdecl ()
   $5 = nterm sdecl_list ()
   $6 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
parsed OK: md.c
[AST 0]
  Decl type=int* name=a
[AST 1]
  Decl type=int(*)(int, char*) name=fp
[AST 2]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token '(' ()
Shifting token '(' ()
Entering state 102
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 31 71 102
Entering state 72
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 71 102
Entering state 187
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 286
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 102 187
Entering state 103
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 102 187 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 71 102 187 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 102 187
Entering state 103
Reading a token: Next token is token ')' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 71 102
Entering state 188
Next token is token ')' ()
Shifting token ')' ()
Entering state 287
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 367
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 71 102 188 287 367
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 71 102 188 287 367
Entering state 400
Reading a token: Next token is token ')' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 71 102 188 287 367 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 31 71 102 188 287 367
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 31 71 102 188 287 367
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 31 71 102 188 287 367
Entering state 401
Next token is token ')' ()
Shifting token ')' ()
Entering state 426
Reducing stack by rule 140 (line 781):
   $1 = token '(' ()
   $2 = nterm sdecl ()
   $3 = token ')' ()
   $4 = token '(' ()
   $5 = nterm fp_param_list_opt ()
   $6 = token ')' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Reading a token: Next token is token ',' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31
Entering state 75
Next token is token ',' ()
Shifting token ',' ()
Entering state 107
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107
Entering state 187
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 286
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 187
Entering state 103
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 107 187 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 75 107 187 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 187
Entering state 103
Reading a token: Next token is token ';' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 75 107
Entering state 193
Reducing stack by rule 135 (line 769):
-> $$ = nterm sdecl_list ()
Stack now 0 1 31 75 107 193
Entering state 298
Next token is token ';' ()
Shifting token ';' ()
Entering state 376
Reducing stack by rule 7 (line 240):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token ',' ()
   $4 = nterm sdecl ()
   $5 = nterm sdecl_list ()
   $6 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
parsed OK: md2.c
[AST 0]
  Decl type=int[2](*)(int) name=fpa
[AST 1]
  Decl type=int[3] name=arr
[AST 2]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token '(' ()
Shifting token '(' ()
Entering state 122
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 207
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 302
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 377
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 410
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 400
Reading a token: Next token is token ',' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410 400
Entering state 425
Next token is token ',' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 402
Next token is token ',' ()
Shifting token ',' ()
Entering state 427
Reading a token: Next token is token KW_CHAR ()
Shifting token KW_CHAR ()
Entering state 5
Reducing stack by rule 53 (line 498):
   $1 = token KW_CHAR ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427
Entering state 400
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427 400
Entering state 72
Reading a token: Next token is token ')' ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427
Entering state 439
Reducing stack by rule 112 (line 647):
   $1 = nterm fp_param_list ()
   $2 = token ',' ()
   $3 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 429
Next token is token ')' ()
Shifting token ')' ()
Entering state 441
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 447
Reducing stack by rule 17 (line 343):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token '(' ()
   $5 = token '*' ()
   $6 = token IDENTIFIER ()
   $7 = token ')' ()
   $8 = token '(' ()
   $9 = nterm fp_param_list_opt ()
   $10 = token ')' ()
   $11 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
FP
parsed OK: onlyfp.c
[AST 0]
  Typedef type=int(*)(int, char*) name=FP
[AST 1]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token '(' ()
Shifting token '(' ()
Entering state 122
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 207
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 302
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 184
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 283
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 364
Reducing stack by rule 66 (line 526):
   $1 = token '[' ()
   $2 = token INTEGER_CONSTANT ()
   $3 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 122 207 302
Entering state 378
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 285
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 366
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 399
Reducing stack by rule 67 (line 533):
   $1 = nterm array_dims ()
   $2 = token '[' ()
   $3 = token INTEGER_CONSTANT ()
   $4 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 122 207 302
Entering state 378
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 411
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 430
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 400
Reading a token: Next token is token ',' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 400
Entering state 425
Next token is token ',' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 402
Next token is token ',' ()
Shifting token ',' ()
Entering state 427
Reading a token: Next token is token KW_CHAR ()
Shifting token KW_CHAR ()
Entering state 5
Reducing stack by rule 53 (line 498):
   $1 = token KW_CHAR ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427
Entering state 400
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427 400
Entering state 72
Reading a token: Next token is token ')' ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427
Entering state 439
Reducing stack by rule 112 (line 647):
   $1 = nterm fp_param_list ()
   $2 = token ',' ()
   $3 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 442
Next token is token ')' ()
Shifting token ')' ()
Entering state 448
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 450
Reducing stack by rule 18 (line 353):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token '(' ()
   $5 = token '*' ()
   $6 = token IDENTIFIER ()
   $7 = nterm array_dims ()
   $8 = token ')' ()
   $9 = token '(' ()
   $10 = nterm fp_param_list_opt ()
   $11 = token ')' ()
   $12 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
FP2
parsed OK: onlyfpa.c
[AST 0]
  Typedef type=int(*)(int, char*)[2][3] name=FP2
[AST 1]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token '}' ()
Reducing stack by rule 123 (line 695):
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
parsed OK: onlyfunc_ok.c
[AST 0]
  Function rtype=int name=main params=0
    Compound{n=0}
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
parsed OK: onlyfunc.c
[AST 0]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 205
Reducing stack by rule 14 (line 313):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token TYPE_NAME ()
Shifting token TYPE_NAME ()
Entering state 3
Reducing stack by rule 63 (line 508):
   $1 = token TYPE_NAME ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '=' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31
Entering state 75
Next token is token '=' ()
Shifting token '=' ()
Entering state 106
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106
Entering state 192
Next token is token ';' ()
Shifting token ';' ()
Entering state 297
Reducing stack by rule 8 (line 248):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
I
parsed OK: mini.c
[AST 0]
  Typedef type=int name=I
[AST 1]
  Decl type=I name=g
    init:
      Int(3)
[AST 2]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
parsed OK: onlyfunc.c
[AST 0]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token '}' ()
Reducing stack by rule 123 (line 695):
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
parsed OK: onlyfunc2.c
[AST 0]
  Function rtype=int name=main params=0
    Compound{n=0}
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token '+' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token '+' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token '+' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token '+' ()
Shifting token '+' ()
Entering state 251
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135 174 251
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135 174 251
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135 174 251
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135 174 251
Entering state 335
Next token is token ';' ()
Reducing stack by rule 196 (line 894):
   $1 = nterm additive_expression ()
   $2 = token '+' ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
parsed OK: onlyfunc3.c
[AST 0]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Binary(op=+)
          Int(1)
          Int(1)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '=' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31
Entering state 75
Next token is token '=' ()
Shifting token '=' ()
Entering state 106
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106
Entering state 192
Next token is token ';' ()
Shifting token ';' ()
Entering state 297
Reducing stack by rule 8 (line 248):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
parsed OK: onlyvar.c
[AST 0]
  Decl type=int name=g
    init:
      Int(3)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_UNSIGNED ()
Shifting token KW_UNSIGNED ()
Entering state 10
Reducing stack by rule 58 (line 503):
   $1 = token KW_UNSIGNED ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token KW_LONG ()
Shifting token KW_LONG ()
Entering state 8
Reducing stack by rule 56 (line 501):
   $1 = token KW_LONG ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41
Entering state 73
Reducing stack by rule 65 (line 515):
   $1 = nterm type_specifier ()
   $2 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 205
Reducing stack by rule 14 (line 313):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_CHAR ()
Shifting token KW_CHAR ()
Entering state 5
Reducing stack by rule 53 (line 498):
   $1 = token KW_CHAR ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 16 41
Entering state 72
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 205
Reducing stack by rule 14 (line 313):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
UL
typedef_add
PCHAR
parsed OK: t_typedef.c
[AST 0]
  Typedef type=unsigned long name=UL
[AST 1]
  Typedef type=char* name=PCHAR
[AST 2]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 205
Reducing stack by rule 14 (line 313):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
I
parsed OK: t.c
[AST 0]
  Typedef type=int name=I
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 205
Reducing stack by rule 14 (line 313):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
I
parsed OK: t2.c
[AST 0]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
[AST 1]
  Typedef type=int name=I
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 184
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 283
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 364
Reducing stack by rule 66 (line 526):
   $1 = token '[' ()
   $2 = token INTEGER_CONSTANT ()
   $3 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 121
Entering state 206
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 285
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 366
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 399
Reducing stack by rule 67 (line 533):
   $1 = nterm array_dims ()
   $2 = token '[' ()
   $3 = token INTEGER_CONSTANT ()
   $4 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 121
Entering state 206
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 301
Reducing stack by rule 15 (line 323):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = nterm array_dims ()
   $6 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
A
parsed OK: tA.c
[AST 0]
  Typedef type=int[3][4] name=A
[AST 1]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 205
Reducing stack by rule 14 (line 313):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token '(' ()
Shifting token '(' ()
Entering state 122
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 207
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 302
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 377
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 410
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 400
Reading a token: Next token is token ',' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410 400
Entering state 425
Next token is token ',' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 402
Next token is token ',' ()
Shifting token ',' ()
Entering state 427
Reading a token: Next token is token KW_CHAR ()
Shifting token KW_CHAR ()
Entering state 5
Reducing stack by rule 53 (line 498):
   $1 = token KW_CHAR ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427
Entering state 400
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427 400
Entering state 72
Reading a token: Next token is token ')' ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427
Entering state 439
Reducing stack by rule 112 (line 647):
   $1 = nterm fp_param_list ()
   $2 = token ',' ()
   $3 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 429
Next token is token ')' ()
Shifting token ')' ()
Entering state 441
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 447
Reducing stack by rule 17 (line 343):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token '(' ()
   $5 = token '*' ()
   $6 = token IDENTIFIER ()
   $7 = token ')' ()
   $8 = token '(' ()
   $9 = nterm fp_param_list_opt ()
   $10 = token ')' ()
   $11 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token TYPE_NAME ()
Shifting token TYPE_NAME ()
Entering state 3
Reducing stack by rule 63 (line 508):
   $1 = token TYPE_NAME ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '=' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31
Entering state 75
Next token is token '=' ()
Shifting token '=' ()
Entering state 106
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106
Entering state 192
Next token is token ';' ()
Shifting token ';' ()
Entering state 297
Reducing stack by rule 8 (line 248):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token TYPE_NAME ()
Shifting token TYPE_NAME ()
Entering state 3
Reducing stack by rule 63 (line 508):
   $1 = token TYPE_NAME ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 153
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 153
Entering state 231
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 317
Reading a token: Next token is token '=' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 153 231
Entering state 103
Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 71 101 183 282 363 96 153
Entering state 232
Next token is token '=' ()
Shifting token '=' ()
Entering state 318
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 389
Next token is token ';' ()
Shifting token ';' ()
Entering state 421
Reducing stack by rule 132 (line 746):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token TYPE_NAME ()
Shifting token TYPE_NAME ()
Entering state 3
Reducing stack by rule 63 (line 508):
   $1 = token TYPE_NAME ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 153
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153
Entering state 231
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 317
Reading a token: Next token is token '=' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231
Entering state 103
Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 71 101 183 282 363 96 157 153
Entering state 232
Next token is token '=' ()
Shifting token '=' ()
Entering state 318
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 389
Next token is token ';' ()
Shifting token ';' ()
Entering state 421
Reducing stack by rule 132 (line 746):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 234
Reducing stack by rule 126 (line 701):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 129
Reducing stack by rule 222 (line 941):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 234
Reducing stack by rule 126 (line 701):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
I
typedef_add
FP
parsed OK: tdecl.c
[AST 0]
  Typedef type=int name=I
[AST 1]
  Typedef type=int(*)(int, char*) name=FP
[AST 2]
  Decl type=I name=g
    init:
      Int(3)
[AST 3]
  Function rtype=int name=main params=0
    Compound{n=3}
      Decl type=I name=x
        init:
          Int(1)
      Decl type=FP name=f
        init:
          Int(0)
      Return
        Ident(x)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_STRUCT ()
Shifting token KW_STRUCT ()
Entering state 13
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 78
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 13 35 78
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 13 35 78
Entering state 66
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 43 (line 474):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifier ()
Stack now 0 1 13 35 78
Entering state 26
Reducing stack by rule 40 (line 468):
   $1 = nterm declaration_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 1 13 35 78
Entering state 79
Next token is token IDENTIFIER ()
Reducing stack by rule 94 (line 603):
-> $$ = nterm pointer_opt ()
Stack now 0 1 13 35 78 79
Entering state 68
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 98
Reducing stack by rule 100 (line 616):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 1 13 35 78 79 68
Entering state 100
Reading a token: Next token is token ';' ()
Reducing stack by rule 93 (line 600):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 1 13 35 78 79
Entering state 112
Next token is token ';' ()
Reducing stack by rule 81 (line 572):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 1 13 35 78 79
Entering state 111
Reducing stack by rule 79 (line 567):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 1 13 35 78 79
Entering state 110
Next token is token ';' ()
Shifting token ';' ()
Entering state 199
Reducing stack by rule 78 (line 563):
   $1 = nterm declaration_specifiers ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 1 13 35 78
Entering state 82
Reducing stack by rule 76 (line 558):
   $1 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 1 13 35 78
Entering state 81
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 13 35 78 81
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 13 35 78 81
Entering state 66
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 43 (line 474):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifier ()
Stack now 0 1 13 35 78 81
Entering state 26
Reducing stack by rule 40 (line 468):
   $1 = nterm declaration_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 1 13 35 78 81
Entering state 79
Next token is token IDENTIFIER ()
Reducing stack by rule 94 (line 603):
-> $$ = nterm pointer_opt ()
Stack now 0 1 13 35 78 81 79
Entering state 68
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 98
Reducing stack by rule 100 (line 616):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 1 13 35 78 81 79 68
Entering state 100
Reading a token: Next token is token ';' ()
Reducing stack by rule 93 (line 600):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 1 13 35 78 81 79
Entering state 112
Next token is token ';' ()
Reducing stack by rule 81 (line 572):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 1 13 35 78 81 79
Entering state 111
Reducing stack by rule 79 (line 567):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 1 13 35 78 81 79
Entering state 110
Next token is token ';' ()
Shifting token ';' ()
Entering state 199
Reducing stack by rule 78 (line 563):
   $1 = nterm declaration_specifiers ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 1 13 35 78 81
Entering state 114
Reducing stack by rule 77 (line 559):
   $1 = nterm struct_declaration_list ()
   $2 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 1 13 35 78
Entering state 81
Reading a token: Next token is token '}' ()
Reducing stack by rule 75 (line 554):
   $1 = nterm struct_declaration_list ()
-> $$ = nterm struct_declaration_list_opt ()
Stack now 0 1 13 35 78
Entering state 108
Next token is token '}' ()
Shifting token '}' ()
Entering state 194
Reducing stack by rule 68 (line 544):
   $1 = token KW_STRUCT ()
   $2 = token IDENTIFIER ()
   $3 = token '{' ()
   $4 = nterm struct_declaration_list_opt ()
   $5 = token '}' ()
-> $$ = nterm struct_or_union_specifier ()
Stack now 0 1
Entering state 32
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 76
Reducing stack by rule 23 (line 393):
   $1 = nterm struct_or_union_specifier ()
   $2 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_STRUCT ()
Shifting token KW_STRUCT ()
Entering state 13
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 72 (line 548):
   $1 = token KW_STRUCT ()
   $2 = token IDENTIFIER ()
-> $$ = nterm struct_or_union_specifier ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 42
Reducing stack by rule 61 (line 506):
   $1 = nterm struct_or_union_specifier ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 153
Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 153
Entering state 231
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 317
Reading a token: Next token is token '=' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 153 231
Entering state 103
Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 71 101 183 282 363 96 153
Entering state 232
Next token is token '=' ()
Shifting token '=' ()
Entering state 318
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token '.' ()
Shifting token '.' ()
Entering state 290
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 370
Reducing stack by rule 239 (line 978):
   $1 = token '.' ()
   $2 = token IDENTIFIER ()
-> $$ = nterm designator ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 296
Reducing stack by rule 237 (line 973):
   $1 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 295
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 373
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 408
Reducing stack by rule 236 (line 968):
   $1 = nterm designation ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm designated_initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 294
Reducing stack by rule 233 (line 962):
   $1 = nterm designated_initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token '.' ()
Shifting token '.' ()
Entering state 290
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 370
Reducing stack by rule 239 (line 978):
   $1 = token '.' ()
   $2 = token IDENTIFIER ()
-> $$ = nterm designator ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 296
Reducing stack by rule 237 (line 973):
   $1 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 295
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 373
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 408
Reducing stack by rule 236 (line 968):
   $1 = nterm designation ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm designated_initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 407
Reducing stack by rule 235 (line 964):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designated_initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 389
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 421
Reducing stack by rule 132 (line 746):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 153
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153
Entering state 231
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 317
Reading a token: Next token is token '[' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231
Entering state 103
Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231
Entering state 103
Reading a token: Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 71 101 183 282 363 96 157 153
Entering state 232
Next token is token '=' ()
Shifting token '=' ()
Entering state 318
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 289
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 195
Reducing stack by rule 242 (line 984):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 369
Next token is token ']' ()
Shifting token ']' ()
Entering state 405
Reducing stack by rule 240 (line 979):
   $1 = token '[' ()
   $2 = nterm constant_expression ()
   $3 = token ']' ()
-> $$ = nterm designator ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 296
Reducing stack by rule 237 (line 973):
   $1 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 295
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 373
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 408
Reducing stack by rule 236 (line 968):
   $1 = nterm designation ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm designated_initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 294
Reducing stack by rule 233 (line 962):
   $1 = nterm designated_initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 289
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 195
Reducing stack by rule 242 (line 984):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 369
Next token is token ']' ()
Shifting token ']' ()
Entering state 405
Reducing stack by rule 240 (line 979):
   $1 = token '[' ()
   $2 = nterm constant_expression ()
   $3 = token ']' ()
-> $$ = nterm designator ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 296
Reducing stack by rule 237 (line 973):
   $1 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 295
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 373
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 408
Reducing stack by rule 236 (line 968):
   $1 = nterm designation ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm designated_initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 407
Reducing stack by rule 235 (line 964):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designated_initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 389
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 421
Reducing stack by rule 132 (line 746):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 234
Reducing stack by rule 126 (line 701):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 129
Reducing stack by rule 222 (line 941):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 177
Reading a token: Next token is token '.' ()
Shifting token '.' ()
Entering state 272
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 356
Reducing stack by rule 214 (line 924):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 177
Reading a token: Next token is token '+' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 176
Next token is token '+' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 175
Next token is token '+' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 174
Next token is token '+' ()
Shifting token '+' ()
Entering state 251
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 129
Reducing stack by rule 222 (line 941):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251
Entering state 177
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 271
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 355
Next token is token ']' ()
Shifting token ']' ()
Entering state 394
Reducing stack by rule 213 (line 923):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251
Entering state 335
Next token is token ';' ()
Reducing stack by rule 196 (line 894):
   $1 = nterm additive_expression ()
   $2 = token '+' ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 234
Reducing stack by rule 126 (line 701):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
parsed OK: tdesign.c
[AST 0]
  Function rtype=int name=main params=0
    Compound{n=3}
      Decl type=struct P name=p
        init:
          InitList{n=2}
            DesignatedChain{n=1}
              .
                field=y
              value:
                Int(10)
            DesignatedChain{n=1}
              .
                field=x
              value:
                Int(5)
      Decl type=int[5] name=a
        init:
          InitList{n=2}
            DesignatedChain{n=1}
              [index]
                Int(2)
              value:
                Int(3)
            DesignatedChain{n=1}
              [index]
                Int(4)
              value:
                Int(7)
      Return
        Binary(op=+)
          Member(.x)
            Ident(p)
          Index
            Ident(a)
            Int(2)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token '(' ()
Shifting token '(' ()
Entering state 122
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 207
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 302
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 184
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 283
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 364
Reducing stack by rule 66 (line 526):
   $1 = token '[' ()
   $2 = token INTEGER_CONSTANT ()
   $3 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 122 207 302
Entering state 378
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 411
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 430
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 400
Reading a token: Next token is token ')' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 442
Next token is token ')' ()
Shifting token ')' ()
Entering state 448
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 450
Reducing stack by rule 18 (line 353):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token '(' ()
   $5 = token '*' ()
   $6 = token IDENTIFIER ()
   $7 = nterm array_dims ()
   $8 = token ')' ()
   $9 = token '(' ()
   $10 = nterm fp_param_list_opt ()
   $11 = token ')' ()
   $12 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
FP
parsed OK: tFP.c
[AST 0]
  Typedef type=int(*)(int)[2] name=FP
[AST 1]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token '(' ()
Shifting token '(' ()
Entering state 122
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 207
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 302
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 184
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 283
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 364
Reducing stack by rule 66 (line 526):
   $1 = token '[' ()
   $2 = token INTEGER_CONSTANT ()
   $3 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 122 207 302
Entering state 378
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 285
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 366
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 399
Reducing stack by rule 67 (line 533):
   $1 = nterm array_dims ()
   $2 = token '[' ()
   $3 = token INTEGER_CONSTANT ()
   $4 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 122 207 302
Entering state 378
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 411
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 430
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 400
Reading a token: Next token is token ',' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 400
Entering state 425
Next token is token ',' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 402
Next token is token ',' ()
Shifting token ',' ()
Entering state 427
Reading a token: Next token is token KW_CHAR ()
Shifting token KW_CHAR ()
Entering state 5
Reducing stack by rule 53 (line 498):
   $1 = token KW_CHAR ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427
Entering state 400
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427 400
Entering state 72
Reading a token: Next token is token ')' ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427
Entering state 439
Reducing stack by rule 112 (line 647):
   $1 = nterm fp_param_list ()
   $2 = token ',' ()
   $3 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 442
Next token is token ')' ()
Shifting token ')' ()
Entering state 448
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 450
Reducing stack by rule 18 (line 353):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token '(' ()
   $5 = token '*' ()
   $6 = token IDENTIFIER ()
   $7 = nterm array_dims ()
   $8 = token ')' ()
   $9 = token '(' ()
   $10 = nterm fp_param_list_opt ()
   $11 = token ')' ()
   $12 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
FP2
parsed OK: tFP2.c
[AST 0]
  Typedef type=int(*)(int, char*)[2][3] name=FP2
[AST 1]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '[' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 71 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Reading a token: Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31
Entering state 75
Next token is token '=' ()
Shifting token '=' ()
Entering state 106
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106 190
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190
Entering state 291
Reducing stack by rule 232 (line 961):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 75 106 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106
Entering state 192
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 297
Reducing stack by rule 8 (line 248):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '[' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 71 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 71 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Reading a token: Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31
Entering state 75
Next token is token '=' ()
Shifting token '=' ()
Entering state 106
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106 190 190
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190 190
Entering state 291
Reducing stack by rule 232 (line 961):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 75 106 190 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190
Entering state 291
Reducing stack by rule 232 (line 961):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190
Entering state 293
Reading a token: Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 291
Reducing stack by rule 232 (line 961):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190 293 372 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 75 106 190 293 372 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190
Entering state 293
Reading a token: Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 75 106 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106
Entering state 192
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 297
Reducing stack by rule 8 (line 248):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '=' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31
Entering state 75
Next token is token '=' ()
Shifting token '=' ()
Entering state 106
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106 190
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190
Entering state 291
Reducing stack by rule 232 (line 961):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106 190 293 372
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 75 106 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106
Entering state 192
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 297
Reducing stack by rule 8 (line 248):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '[' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 71 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Reading a token: Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31
Entering state 75
Next token is token '=' ()
Shifting token '=' ()
Entering state 106
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 289
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 195
Reducing stack by rule 242 (line 984):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 369
Next token is token ']' ()
Shifting token ']' ()
Entering state 405
Reducing stack by rule 240 (line 979):
   $1 = token '[' ()
   $2 = nterm constant_expression ()
   $3 = token ']' ()
-> $$ = nterm designator ()
Stack now 0 1 31 75 106 190
Entering state 296
Reducing stack by rule 237 (line 973):
   $1 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 75 106 190
Entering state 295
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 373
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190 295 373
Entering state 408
Reducing stack by rule 236 (line 968):
   $1 = nterm designation ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm designated_initializer ()
Stack now 0 1 31 75 106 190
Entering state 294
Reducing stack by rule 233 (line 962):
   $1 = nterm designated_initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 75 106 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106
Entering state 192
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 297
Reducing stack by rule 8 (line 248):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '[' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 71 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Reading a token: Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31
Entering state 75
Next token is token '=' ()
Shifting token '=' ()
Entering state 106
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 289
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 177
Reading a token: Next token is token ELLIPSIS ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 175
Next token is token ELLIPSIS ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 174
Next token is token ELLIPSIS ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 173
Next token is token ELLIPSIS ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 172
Next token is token ELLIPSIS ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 171
Next token is token ELLIPSIS ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 170
Next token is token ELLIPSIS ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 169
Next token is token ELLIPSIS ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 168
Next token is token ELLIPSIS ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 167
Next token is token ELLIPSIS ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 166
Next token is token ELLIPSIS ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 195
Reducing stack by rule 242 (line 984):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 1 31 75 106 190 289
Entering state 369
Next token is token ELLIPSIS ()
Shifting token ELLIPSIS ()
Entering state 404
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 195
Reducing stack by rule 242 (line 984):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 1 31 75 106 190 289 369 404
Entering state 428
Next token is token ']' ()
Shifting token ']' ()
Entering state 440
Reducing stack by rule 241 (line 980):
   $1 = token '[' ()
   $2 = nterm constant_expression ()
   $3 = token ELLIPSIS ()
   $4 = nterm constant_expression ()
   $5 = token ']' ()
-> $$ = nterm designator ()
Stack now 0 1 31 75 106 190
Entering state 296
Reducing stack by rule 237 (line 973):
   $1 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 75 106 190
Entering state 295
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 373
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 106 190 295 373
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106 190 295 373
Entering state 408
Reducing stack by rule 236 (line 968):
   $1 = nterm designation ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm designated_initializer ()
Stack now 0 1 31 75 106 190
Entering state 294
Reducing stack by rule 233 (line 962):
   $1 = nterm designated_initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 75 106 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 75 106 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 75 106
Entering state 192
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 297
Reducing stack by rule 8 (line 248):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
error: too many elements for array dimension 3 (got 4)
error: too many elements for array dimension 2 (got 3)
warn: scalar initialized with 2 elements
parsed OK: tglob.c
[AST 0]
  Decl type=int[3] name=a
    init:
      InitList{n=4}
        Int(1)
        Int(2)
        Int(3)
        Int(4)
[AST 1]
  Decl type=int[2][2] name=b
    init:
      InitList{n=2}
        InitList{n=3}
          Int(1)
          Int(2)
          Int(3)
        InitList{n=2}
          Int(4)
          Int(5)
[AST 2]
  Decl type=int name=c
    init:
      InitList{n=2}
        Int(1)
        Int(2)
[AST 3]
  Decl type=int[3] name=d
    init:
      InitList{n=1}
        DesignatedChain{n=1}
          [index]
            Int(5)
          value:
            Int(1)
[AST 4]
  Decl type=int[4] name=e
    init:
      InitList{n=1}
        DesignatedChain{n=1}
          [range]
            first:
              Int(1)
            last:
              Int(3)
          value:
            Int(7)
[AST 5]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_STRUCT ()
Shifting token KW_STRUCT ()
Entering state 13
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 78
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 13 35 78
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 13 35 78
Entering state 66
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 43 (line 474):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifier ()
Stack now 0 1 13 35 78
Entering state 26
Reducing stack by rule 40 (line 468):
   $1 = nterm declaration_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 1 13 35 78
Entering state 79
Next token is token IDENTIFIER ()
Reducing stack by rule 94 (line 603):
-> $$ = nterm pointer_opt ()
Stack now 0 1 13 35 78 79
Entering state 68
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 98
Reducing stack by rule 100 (line 616):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 1 13 35 78 79 68
Entering state 100
Reading a token: Next token is token ';' ()
Reducing stack by rule 93 (line 600):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 1 13 35 78 79
Entering state 112
Next token is token ';' ()
Reducing stack by rule 81 (line 572):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 1 13 35 78 79
Entering state 111
Reducing stack by rule 79 (line 567):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 1 13 35 78 79
Entering state 110
Next token is token ';' ()
Shifting token ';' ()
Entering state 199
Reducing stack by rule 78 (line 563):
   $1 = nterm declaration_specifiers ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 1 13 35 78
Entering state 82
Reducing stack by rule 76 (line 558):
   $1 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 1 13 35 78
Entering state 81
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 13 35 78 81
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 13 35 78 81
Entering state 66
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 43 (line 474):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifier ()
Stack now 0 1 13 35 78 81
Entering state 26
Reducing stack by rule 40 (line 468):
   $1 = nterm declaration_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 1 13 35 78 81
Entering state 79
Next token is token IDENTIFIER ()
Reducing stack by rule 94 (line 603):
-> $$ = nterm pointer_opt ()
Stack now 0 1 13 35 78 81 79
Entering state 68
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 98
Reducing stack by rule 100 (line 616):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 1 13 35 78 81 79 68
Entering state 100
Reading a token: Next token is token ';' ()
Reducing stack by rule 93 (line 600):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 1 13 35 78 81 79
Entering state 112
Next token is token ';' ()
Reducing stack by rule 81 (line 572):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 1 13 35 78 81 79
Entering state 111
Reducing stack by rule 79 (line 567):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 1 13 35 78 81 79
Entering state 110
Next token is token ';' ()
Shifting token ';' ()
Entering state 199
Reducing stack by rule 78 (line 563):
   $1 = nterm declaration_specifiers ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 1 13 35 78 81
Entering state 114
Reducing stack by rule 77 (line 559):
   $1 = nterm struct_declaration_list ()
   $2 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 1 13 35 78
Entering state 81
Reading a token: Next token is token '}' ()
Reducing stack by rule 75 (line 554):
   $1 = nterm struct_declaration_list ()
-> $$ = nterm struct_declaration_list_opt ()
Stack now 0 1 13 35 78
Entering state 108
Next token is token '}' ()
Shifting token '}' ()
Entering state 194
Reducing stack by rule 68 (line 544):
   $1 = token KW_STRUCT ()
   $2 = token IDENTIFIER ()
   $3 = token '{' ()
   $4 = nterm struct_declaration_list_opt ()
   $5 = token '}' ()
-> $$ = nterm struct_or_union_specifier ()
Stack now 0 1
Entering state 32
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 76
Reducing stack by rule 23 (line 393):
   $1 = nterm struct_or_union_specifier ()
   $2 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 153
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 153
Entering state 231
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 317
Reading a token: Next token is token '[' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 153 231
Entering state 103
Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 153 231 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 153 231
Entering state 103
Reading a token: Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 71 101 183 282 363 96 153
Entering state 232
Next token is token '=' ()
Shifting token '=' ()
Entering state 318
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 291
Reducing stack by rule 232 (line 961):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 389
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 421
Reducing stack by rule 132 (line 746):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token KW_STRUCT ()
Shifting token KW_STRUCT ()
Entering state 13
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 72 (line 548):
   $1 = token KW_STRUCT ()
   $2 = token IDENTIFIER ()
-> $$ = nterm struct_or_union_specifier ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 42
Reducing stack by rule 61 (line 506):
   $1 = nterm struct_or_union_specifier ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 153
Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153
Entering state 231
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 317
Reading a token: Next token is token '=' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231
Entering state 103
Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 71 101 183 282 363 96 157 153
Entering state 232
Next token is token '=' ()
Shifting token '=' ()
Entering state 318
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 291
Reducing stack by rule 232 (line 961):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 389
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 421
Reducing stack by rule 132 (line 746):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 234
Reducing stack by rule 126 (line 701):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 153
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153
Entering state 231
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 317
Reading a token: Next token is token '[' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231
Entering state 103
Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231
Entering state 103
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231
Entering state 103
Reading a token: Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 71 101 183 282 363 96 157 153
Entering state 232
Next token is token '=' ()
Shifting token '=' ()
Entering state 318
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 291
Reducing stack by rule 232 (line 961):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 291
Reducing stack by rule 232 (line 961):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 293
Reading a token: Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 291
Reducing stack by rule 232 (line 961):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 406
Reducing stack by rule 234 (line 963):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 293
Reading a token: Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 389
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 421
Reducing stack by rule 132 (line 746):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 234
Reducing stack by rule 126 (line 701):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 129
Reducing stack by rule 222 (line 941):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 177
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 271
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 355
Next token is token ']' ()
Shifting token ']' ()
Entering state 394
Reducing stack by rule 213 (line 923):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 234
Reducing stack by rule 126 (line 701):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
parsed OK: tinit.c
[AST 0]
  Function rtype=int name=main params=0
    Compound{n=4}
      Decl type=int[3] name=a
        init:
          InitList{n=3}
            Int(1)
            Int(2)
            Int(3)
      Decl type=struct P name=p
        init:
          InitList{n=2}
            Int(10)
            Int(20)
      Decl type=int[2][2] name=b
        init:
          InitList{n=2}
            InitList{n=2}
              Int(1)
              Int(2)
            InitList{n=2}
              Int(3)
              Int(4)
      Return
        Index
          Ident(a)
          Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 184
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 283
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 364
Reducing stack by rule 66 (line 526):
   $1 = token '[' ()
   $2 = token INTEGER_CONSTANT ()
   $3 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 121
Entering state 206
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 285
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 366
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 399
Reducing stack by rule 67 (line 533):
   $1 = nterm array_dims ()
   $2 = token '[' ()
   $3 = token INTEGER_CONSTANT ()
   $4 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 121
Entering state 206
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 301
Reducing stack by rule 15 (line 323):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = nterm array_dims ()
   $6 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token '(' ()
Shifting token '(' ()
Entering state 122
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 207
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 302
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 184
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 283
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 364
Reducing stack by rule 66 (line 526):
   $1 = token '[' ()
   $2 = token INTEGER_CONSTANT ()
   $3 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 122 207 302
Entering state 378
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 411
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 430
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 400
Reading a token: Next token is token ')' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 442
Next token is token ')' ()
Shifting token ')' ()
Entering state 448
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 450
Reducing stack by rule 18 (line 353):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token '(' ()
   $5 = token '*' ()
   $6 = token IDENTIFIER ()
   $7 = nterm array_dims ()
   $8 = token ')' ()
   $9 = token '(' ()
   $10 = nterm fp_param_list_opt ()
   $11 = token ')' ()
   $12 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token '(' ()
Shifting token '(' ()
Entering state 122
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 207
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 302
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 184
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 283
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 364
Reducing stack by rule 66 (line 526):
   $1 = token '[' ()
   $2 = token INTEGER_CONSTANT ()
   $3 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 122 207 302
Entering state 378
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 285
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 366
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 399
Reducing stack by rule 67 (line 533):
   $1 = nterm array_dims ()
   $2 = token '[' ()
   $3 = token INTEGER_CONSTANT ()
   $4 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 122 207 302
Entering state 378
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 411
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 430
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 400
Reading a token: Next token is token ',' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 400
Entering state 425
Next token is token ',' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 402
Next token is token ',' ()
Shifting token ',' ()
Entering state 427
Reading a token: Next token is token KW_CHAR ()
Shifting token KW_CHAR ()
Entering state 5
Reducing stack by rule 53 (line 498):
   $1 = token KW_CHAR ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427
Entering state 400
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427 400
Entering state 72
Reading a token: Next token is token ')' ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 378 411 430 402 427
Entering state 439
Reducing stack by rule 112 (line 647):
   $1 = nterm fp_param_list ()
   $2 = token ',' ()
   $3 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 16 41 91 122 207 302 378 411 430
Entering state 442
Next token is token ')' ()
Shifting token ')' ()
Entering state 448
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 450
Reducing stack by rule 18 (line 353):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token '(' ()
   $5 = token '*' ()
   $6 = token IDENTIFIER ()
   $7 = nterm array_dims ()
   $8 = token ')' ()
   $9 = token '(' ()
   $10 = nterm fp_param_list_opt ()
   $11 = token ')' ()
   $12 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
A
typedef_add
FP
typedef_add
FP2
parsed OK: tmd.c
[AST 0]
  Typedef type=int[3][4] name=A
[AST 1]
  Typedef type=int(*)(int)[2] name=FP
[AST 2]
  Typedef type=int(*)(int, char*)[2][3] name=FP2
[AST 3]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 205
Reducing stack by rule 14 (line 313):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token TYPE_NAME ()
Shifting token TYPE_NAME ()
Entering state 3
Reducing stack by rule 63 (line 508):
   $1 = token TYPE_NAME ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token TYPE_NAME ()
Shifting token TYPE_NAME ()
Entering state 3
Reducing stack by rule 63 (line 508):
   $1 = token TYPE_NAME ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 71 101 183
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 71 101 183
Entering state 127
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 71 101 183 127
Entering state 187
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 286
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 127 187
Entering state 103
Reading a token: Next token is token ')' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 71 101 183 127
Entering state 210
Reducing stack by rule 38 (line 426):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
-> $$ = nterm parameter_declaration ()
Stack now 0 1 31 71 101 183
Entering state 126
Reducing stack by rule 36 (line 421):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 1 31 71 101 183
Entering state 125
Next token is token ')' ()
Reducing stack by rule 34 (line 416):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_type_list ()
Stack now 0 1 31 71 101 183
Entering state 124
Reducing stack by rule 33 (line 412):
   $1 = nterm parameter_type_list ()
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 129
Reducing stack by rule 222 (line 941):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token TYPE_NAME ()
Shifting token TYPE_NAME ()
Entering state 3
Reducing stack by rule 63 (line 508):
   $1 = token TYPE_NAME ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 153
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 153
Entering state 231
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 317
Reading a token: Next token is token '=' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 153 231
Entering state 103
Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 71 101 183 282 363 96 153
Entering state 232
Next token is token '=' ()
Shifting token '=' ()
Entering state 318
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 389
Next token is token ';' ()
Shifting token ';' ()
Entering state 421
Reducing stack by rule 132 (line 746):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 129
Reducing stack by rule 222 (line 941):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 177
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 270
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 129
Reducing stack by rule 222 (line 941):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 177
Reading a token: Next token is token ')' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 176
Next token is token ')' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 175
Next token is token ')' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 174
Next token is token ')' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 173
Next token is token ')' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 172
Next token is token ')' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 171
Next token is token ')' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 170
Next token is token ')' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 169
Next token is token ')' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 168
Next token is token ')' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 167
Next token is token ')' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 166
Next token is token ')' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 352
Reducing stack by rule 220 (line 936):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 354
Next token is token ')' ()
Reducing stack by rule 219 (line 932):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 270
Entering state 353
Next token is token ')' ()
Shifting token ')' ()
Entering state 392
Reducing stack by rule 212 (line 919):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 234
Reducing stack by rule 126 (line 701):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
I
parsed OK: top.c
[AST 0]
  Typedef type=int name=I
[AST 1]
  Function rtype=I name=f params=1
    param[0]: type=I name=x
    Compound{n=1}
      Return
        Ident(x)
[AST 2]
  Function rtype=int name=main params=0
    Compound{n=2}
      Decl type=I name=a
        init:
          Int(1)
      Return
        Call(argc=1)
          callee:
            Ident(f)
          arg[0]:
            Ident(a)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_STRUCT ()
Shifting token KW_STRUCT ()
Entering state 13
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 72 (line 548):
   $1 = token KW_STRUCT ()
   $2 = token IDENTIFIER ()
-> $$ = nterm struct_or_union_specifier ()
Stack now 0 1 16
Entering state 42
Reducing stack by rule 61 (line 506):
   $1 = nterm struct_or_union_specifier ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 205
Reducing stack by rule 14 (line 313):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 184
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 283
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 364
Reducing stack by rule 66 (line 526):
   $1 = token '[' ()
   $2 = token INTEGER_CONSTANT ()
   $3 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 121
Entering state 206
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 301
Reducing stack by rule 15 (line 323):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = nterm array_dims ()
   $6 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token '(' ()
Shifting token '(' ()
Entering state 122
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 207
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 302
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 377
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 410
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 400
Reading a token: Next token is token ',' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410 400
Entering state 425
Next token is token ',' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 402
Next token is token ',' ()
Shifting token ',' ()
Entering state 427
Reading a token: Next token is token KW_CHAR ()
Shifting token KW_CHAR ()
Entering state 5
Reducing stack by rule 53 (line 498):
   $1 = token KW_CHAR ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427
Entering state 400
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427 400
Entering state 72
Reading a token: Next token is token ')' ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427
Entering state 439
Reducing stack by rule 112 (line 647):
   $1 = nterm fp_param_list ()
   $2 = token ',' ()
   $3 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 429
Next token is token ')' ()
Shifting token ')' ()
Entering state 441
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 447
Reducing stack by rule 17 (line 343):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token '(' ()
   $5 = token '*' ()
   $6 = token IDENTIFIER ()
   $7 = token ')' ()
   $8 = token '(' ()
   $9 = nterm fp_param_list_opt ()
   $10 = token ')' ()
   $11 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
Foo
typedef_add
A
typedef_add
FP
parsed OK: top2.c
[AST 0]
  Typedef type=struct Foo name=Foo
[AST 1]
  Typedef type=int[10] name=A
[AST 2]
  Typedef type=int(*)(int, char*) name=FP
[AST 3]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_STRUCT ()
Shifting token KW_STRUCT ()
Entering state 13
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 72 (line 548):
   $1 = token KW_STRUCT ()
   $2 = token IDENTIFIER ()
-> $$ = nterm struct_or_union_specifier ()
Stack now 0 1 16
Entering state 42
Reducing stack by rule 61 (line 506):
   $1 = nterm struct_or_union_specifier ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 205
Reducing stack by rule 14 (line 313):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 184
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 283
Reading a token: Next token is token ']' ()
Shifting token ']' ()
Entering state 364
Reducing stack by rule 66 (line 526):
   $1 = token '[' ()
   $2 = token INTEGER_CONSTANT ()
   $3 = token ']' ()
-> $$ = nterm array_dims ()
Stack now 0 1 16 41 91 121
Entering state 206
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 301
Reducing stack by rule 15 (line 323):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = nterm array_dims ()
   $6 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token '(' ()
Shifting token '(' ()
Entering state 122
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 207
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 302
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 377
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 410
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 400
Reading a token: Next token is token ',' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410 400
Entering state 425
Next token is token ',' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 402
Next token is token ',' ()
Shifting token ',' ()
Entering state 427
Reading a token: Next token is token KW_CHAR ()
Shifting token KW_CHAR ()
Entering state 5
Reducing stack by rule 53 (line 498):
   $1 = token KW_CHAR ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427
Entering state 400
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427 400
Entering state 72
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427 400
Entering state 425
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 438
Reducing stack by rule 114 (line 664):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 377 410 402 427
Entering state 439
Reducing stack by rule 112 (line 647):
   $1 = nterm fp_param_list ()
   $2 = token ',' ()
   $3 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 402
Reading a token: Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 429
Next token is token ')' ()
Shifting token ')' ()
Entering state 441
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 447
Reducing stack by rule 17 (line 343):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token '(' ()
   $5 = token '*' ()
   $6 = token IDENTIFIER ()
   $7 = token ')' ()
   $8 = token '(' ()
   $9 = nterm fp_param_list_opt ()
   $10 = token ')' ()
   $11 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
Foo
typedef_add
A
typedef_add
FP
parsed OK: top2b.c
[AST 0]
  Typedef type=struct Foo name=Foo
[AST 1]
  Typedef type=int[10] name=A
[AST 2]
  Typedef type=int(*)(int, char*) name=FP
[AST 3]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 121
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 205
Reducing stack by rule 14 (line 313):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token IDENTIFIER ()
   $5 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
I
parsed OK: top3.c
[AST 0]
  Typedef type=int name=I
[AST 1]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_TYPEDEF ()
Shifting token KW_TYPEDEF ()
Entering state 16
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16
Entering state 41
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41
Entering state 91
Next token is token '(' ()
Shifting token '(' ()
Entering state 122
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 207
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 302
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 377
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 410
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 400
Reading a token: Next token is token ')' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 16 41 91 122 207 302 377 410
Entering state 429
Next token is token ')' ()
Shifting token ')' ()
Entering state 441
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 447
Reducing stack by rule 17 (line 343):
   $1 = token KW_TYPEDEF ()
   $2 = nterm type_specifier ()
   $3 = nterm star_list_opt ()
   $4 = token '(' ()
   $5 = token '*' ()
   $6 = token IDENTIFIER ()
   $7 = token ')' ()
   $8 = token '(' ()
   $9 = nterm fp_param_list_opt ()
   $10 = token ')' ()
   $11 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
typedef_add
FP
parsed OK: top5.c
[AST 0]
  Typedef type=int(*)(int) name=FP
[AST 1]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_STRUCT ()
Shifting token KW_STRUCT ()
Entering state 13
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 78
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 13 35 78
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 13 35 78
Entering state 66
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 43 (line 474):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifier ()
Stack now 0 1 13 35 78
Entering state 26
Reducing stack by rule 40 (line 468):
   $1 = nterm declaration_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 1 13 35 78
Entering state 79
Next token is token IDENTIFIER ()
Reducing stack by rule 94 (line 603):
-> $$ = nterm pointer_opt ()
Stack now 0 1 13 35 78 79
Entering state 68
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 98
Reducing stack by rule 100 (line 616):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 1 13 35 78 79 68
Entering state 100
Reading a token: Next token is token ';' ()
Reducing stack by rule 93 (line 600):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 1 13 35 78 79
Entering state 112
Next token is token ';' ()
Reducing stack by rule 81 (line 572):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 1 13 35 78 79
Entering state 111
Reducing stack by rule 79 (line 567):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 1 13 35 78 79
Entering state 110
Next token is token ';' ()
Shifting token ';' ()
Entering state 199
Reducing stack by rule 78 (line 563):
   $1 = nterm declaration_specifiers ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 1 13 35 78
Entering state 82
Reducing stack by rule 76 (line 558):
   $1 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 1 13 35 78
Entering state 81
Reading a token: Next token is token KW_STRUCT ()
Shifting token KW_STRUCT ()
Entering state 13
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 36
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 13 35 78 81 13 36
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 13 35 78 81 13 36
Entering state 66
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 43 (line 474):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifier ()
Stack now 0 1 13 35 78 81 13 36
Entering state 26
Reducing stack by rule 40 (line 468):
   $1 = nterm declaration_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 1 13 35 78 81 13 36
Entering state 79
Next token is token IDENTIFIER ()
Reducing stack by rule 94 (line 603):
-> $$ = nterm pointer_opt ()
Stack now 0 1 13 35 78 81 13 36 79
Entering state 68
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 98
Reducing stack by rule 100 (line 616):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 1 13 35 78 81 13 36 79 68
Entering state 100
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 181
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 13 35 78 81 13 36 79 68 100 181
Entering state 278
Next token is token ']' ()
Shifting token ']' ()
Entering state 360
Reducing stack by rule 102 (line 618):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm direct_declarator ()
Stack now 0 1 13 35 78 81 13 36 79 68
Entering state 100
Reading a token: Next token is token ';' ()
Reducing stack by rule 93 (line 600):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 1 13 35 78 81 13 36 79
Entering state 112
Next token is token ';' ()
Reducing stack by rule 81 (line 572):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 1 13 35 78 81 13 36 79
Entering state 111
Reducing stack by rule 79 (line 567):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 1 13 35 78 81 13 36 79
Entering state 110
Next token is token ';' ()
Shifting token ';' ()
Entering state 199
Reducing stack by rule 78 (line 563):
   $1 = nterm declaration_specifiers ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 1 13 35 78 81 13 36
Entering state 82
Reducing stack by rule 76 (line 558):
   $1 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 1 13 35 78 81 13 36
Entering state 81
Reading a token: Next token is token '}' ()
Reducing stack by rule 75 (line 554):
   $1 = nterm struct_declaration_list ()
-> $$ = nterm struct_declaration_list_opt ()
Stack now 0 1 13 35 78 81 13 36
Entering state 80
Next token is token '}' ()
Shifting token '}' ()
Entering state 113
Reducing stack by rule 70 (line 546):
   $1 = token KW_STRUCT ()
   $2 = token '{' ()
   $3 = nterm struct_declaration_list_opt ()
   $4 = token '}' ()
-> $$ = nterm struct_or_union_specifier ()
Stack now 0 1 13 35 78 81
Entering state 42
Reducing stack by rule 61 (line 506):
   $1 = nterm struct_or_union_specifier ()
-> $$ = nterm type_unit ()
Stack now 0 1 13 35 78 81
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 13 35 78 81
Entering state 66
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 43 (line 474):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifier ()
Stack now 0 1 13 35 78 81
Entering state 26
Reducing stack by rule 40 (line 468):
   $1 = nterm declaration_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 1 13 35 78 81
Entering state 79
Next token is token IDENTIFIER ()
Reducing stack by rule 94 (line 603):
-> $$ = nterm pointer_opt ()
Stack now 0 1 13 35 78 81 79
Entering state 68
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 98
Reducing stack by rule 100 (line 616):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 1 13 35 78 81 79 68
Entering state 100
Reading a token: Next token is token ';' ()
Reducing stack by rule 93 (line 600):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 1 13 35 78 81 79
Entering state 112
Next token is token ';' ()
Reducing stack by rule 81 (line 572):
   $1 = nterm declarator ()
-> $$ = nterm struct_declarator ()
Stack now 0 1 13 35 78 81 79
Entering state 111
Reducing stack by rule 79 (line 567):
   $1 = nterm struct_declarator ()
-> $$ = nterm struct_declarator_list ()
Stack now 0 1 13 35 78 81 79
Entering state 110
Next token is token ';' ()
Shifting token ';' ()
Entering state 199
Reducing stack by rule 78 (line 563):
   $1 = nterm declaration_specifiers ()
   $2 = nterm struct_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm struct_declaration ()
Stack now 0 1 13 35 78 81
Entering state 114
Reducing stack by rule 77 (line 559):
   $1 = nterm struct_declaration_list ()
   $2 = nterm struct_declaration ()
-> $$ = nterm struct_declaration_list ()
Stack now 0 1 13 35 78
Entering state 81
Reading a token: Next token is token '}' ()
Reducing stack by rule 75 (line 554):
   $1 = nterm struct_declaration_list ()
-> $$ = nterm struct_declaration_list_opt ()
Stack now 0 1 13 35 78
Entering state 108
Next token is token '}' ()
Shifting token '}' ()
Entering state 194
Reducing stack by rule 68 (line 544):
   $1 = token KW_STRUCT ()
   $2 = token IDENTIFIER ()
   $3 = token '{' ()
   $4 = nterm struct_declaration_list_opt ()
   $5 = token '}' ()
-> $$ = nterm struct_or_union_specifier ()
Stack now 0 1
Entering state 32
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 76
Reducing stack by rule 23 (line 393):
   $1 = nterm struct_or_union_specifier ()
   $2 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_STRUCT ()
Shifting token KW_STRUCT ()
Entering state 13
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 35
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 72 (line 548):
   $1 = token KW_STRUCT ()
   $2 = token IDENTIFIER ()
-> $$ = nterm struct_or_union_specifier ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 42
Reducing stack by rule 61 (line 506):
   $1 = nterm struct_or_union_specifier ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 153
Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 153
Entering state 231
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 317
Reading a token: Next token is token '=' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 153 231
Entering state 103
Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 71 101 183 282 363 96 153
Entering state 232
Next token is token '=' ()
Shifting token '=' ()
Entering state 318
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token '.' ()
Shifting token '.' ()
Entering state 290
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 370
Reducing stack by rule 239 (line 978):
   $1 = token '.' ()
   $2 = token IDENTIFIER ()
-> $$ = nterm designator ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 296
Reducing stack by rule 237 (line 973):
   $1 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 295
Reading a token: Next token is token '.' ()
Shifting token '.' ()
Entering state 290
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 370
Reducing stack by rule 239 (line 978):
   $1 = token '.' ()
   $2 = token IDENTIFIER ()
-> $$ = nterm designator ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295
Entering state 374
Reducing stack by rule 238 (line 974):
   $1 = nterm designation ()
   $2 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 295
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 289
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 195
Reducing stack by rule 242 (line 984):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 289
Entering state 369
Next token is token ']' ()
Shifting token ']' ()
Entering state 405
Reducing stack by rule 240 (line 979):
   $1 = token '[' ()
   $2 = nterm constant_expression ()
   $3 = token ']' ()
-> $$ = nterm designator ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295
Entering state 374
Reducing stack by rule 238 (line 974):
   $1 = nterm designation ()
   $2 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 295
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 373
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 295 373
Entering state 408
Reducing stack by rule 236 (line 968):
   $1 = nterm designation ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm designated_initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 294
Reducing stack by rule 233 (line 962):
   $1 = nterm designated_initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token '.' ()
Shifting token '.' ()
Entering state 290
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 370
Reducing stack by rule 239 (line 978):
   $1 = token '.' ()
   $2 = token IDENTIFIER ()
-> $$ = nterm designator ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 296
Reducing stack by rule 237 (line 973):
   $1 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 295
Reading a token: Next token is token '.' ()
Shifting token '.' ()
Entering state 290
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 370
Reducing stack by rule 239 (line 978):
   $1 = token '.' ()
   $2 = token IDENTIFIER ()
-> $$ = nterm designator ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295
Entering state 374
Reducing stack by rule 238 (line 974):
   $1 = nterm designation ()
   $2 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 295
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 289
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 177
Reading a token: Next token is token ELLIPSIS ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 175
Next token is token ELLIPSIS ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 174
Next token is token ELLIPSIS ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 173
Next token is token ELLIPSIS ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 172
Next token is token ELLIPSIS ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 171
Next token is token ELLIPSIS ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 170
Next token is token ELLIPSIS ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 169
Next token is token ELLIPSIS ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 168
Next token is token ELLIPSIS ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 167
Next token is token ELLIPSIS ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 166
Next token is token ELLIPSIS ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 195
Reducing stack by rule 242 (line 984):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289
Entering state 369
Next token is token ELLIPSIS ()
Shifting token ELLIPSIS ()
Entering state 404
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 195
Reducing stack by rule 242 (line 984):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 289 369 404
Entering state 428
Next token is token ']' ()
Shifting token ']' ()
Entering state 440
Reducing stack by rule 241 (line 980):
   $1 = token '[' ()
   $2 = nterm constant_expression ()
   $3 = token ELLIPSIS ()
   $4 = nterm constant_expression ()
   $5 = token ']' ()
-> $$ = nterm designator ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295
Entering state 374
Reducing stack by rule 238 (line 974):
   $1 = nterm designation ()
   $2 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 295
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 373
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372 295 373
Entering state 408
Reducing stack by rule 236 (line 968):
   $1 = nterm designation ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm designated_initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190 293 372
Entering state 407
Reducing stack by rule 235 (line 964):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designated_initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 153 232 318
Entering state 389
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 421
Reducing stack by rule 132 (line 746):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 153
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153
Entering state 231
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 317
Reading a token: Next token is token '[' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231
Entering state 103
Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 231
Entering state 103
Reading a token: Next token is token '=' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 71 101 183 282 363 96 157 153
Entering state 232
Next token is token '=' ()
Shifting token '=' ()
Entering state 318
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 190
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 289
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 177
Reading a token: Next token is token ELLIPSIS ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 175
Next token is token ELLIPSIS ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 174
Next token is token ELLIPSIS ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 173
Next token is token ELLIPSIS ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 172
Next token is token ELLIPSIS ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 171
Next token is token ELLIPSIS ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 170
Next token is token ELLIPSIS ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 169
Next token is token ELLIPSIS ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 168
Next token is token ELLIPSIS ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 167
Next token is token ELLIPSIS ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 166
Next token is token ELLIPSIS ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 195
Reducing stack by rule 242 (line 984):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289
Entering state 369
Next token is token ELLIPSIS ()
Shifting token ELLIPSIS ()
Entering state 404
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 195
Reducing stack by rule 242 (line 984):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 289 369 404
Entering state 428
Next token is token ']' ()
Shifting token ']' ()
Entering state 440
Reducing stack by rule 241 (line 980):
   $1 = token '[' ()
   $2 = nterm constant_expression ()
   $3 = token ELLIPSIS ()
   $4 = nterm constant_expression ()
   $5 = token ']' ()
-> $$ = nterm designator ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 296
Reducing stack by rule 237 (line 973):
   $1 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 295
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 373
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 177
Reading a token: Next token is token ',' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 176
Next token is token ',' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 175
Next token is token ',' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 174
Next token is token ',' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 173
Next token is token ',' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 172
Next token is token ',' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 171
Next token is token ',' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 170
Next token is token ',' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 169
Next token is token ',' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 168
Next token is token ',' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 167
Next token is token ',' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 166
Next token is token ',' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 295 373
Entering state 408
Reducing stack by rule 236 (line 968):
   $1 = nterm designation ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm designated_initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 294
Reducing stack by rule 233 (line 962):
   $1 = nterm designated_initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 293
Next token is token ',' ()
Shifting token ',' ()
Entering state 372
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 289
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 195
Reducing stack by rule 242 (line 984):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 289
Entering state 369
Next token is token ']' ()
Shifting token ']' ()
Entering state 405
Reducing stack by rule 240 (line 979):
   $1 = token '[' ()
   $2 = nterm constant_expression ()
   $3 = token ']' ()
-> $$ = nterm designator ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 296
Reducing stack by rule 237 (line 973):
   $1 = nterm designator ()
-> $$ = nterm designation ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 295
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 373
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 177
Reading a token: Next token is token '}' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 176
Next token is token '}' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 175
Next token is token '}' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 174
Next token is token '}' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 173
Next token is token '}' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 172
Next token is token '}' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 171
Next token is token '}' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 170
Next token is token '}' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 169
Next token is token '}' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 168
Next token is token '}' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 167
Next token is token '}' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 166
Next token is token '}' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 191
Reducing stack by rule 228 (line 951):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372 295 373
Entering state 408
Reducing stack by rule 236 (line 968):
   $1 = nterm designation ()
   $2 = token '=' ()
   $3 = nterm initializer ()
-> $$ = nterm designated_initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190 293 372
Entering state 407
Reducing stack by rule 235 (line 964):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm designated_initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 293
Next token is token '}' ()
Reducing stack by rule 231 (line 957):
   $1 = nterm initializer_list ()
-> $$ = nterm initializer_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318 190
Entering state 292
Next token is token '}' ()
Shifting token '}' ()
Entering state 371
Reducing stack by rule 229 (line 952):
   $1 = token '{' ()
   $2 = nterm initializer_list_opt ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 1 31 71 101 183 282 363 96 157 153 232 318
Entering state 389
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 421
Reducing stack by rule 132 (line 746):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token '=' ()
   $4 = nterm initializer ()
   $5 = token ';' ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 234
Reducing stack by rule 126 (line 701):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 129
Reducing stack by rule 222 (line 941):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 177
Reading a token: Next token is token '.' ()
Shifting token '.' ()
Entering state 272
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 356
Reducing stack by rule 214 (line 924):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 177
Reading a token: Next token is token '.' ()
Shifting token '.' ()
Entering state 272
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 356
Reducing stack by rule 214 (line 924):
   $1 = nterm postfix_expression ()
   $2 = token '.' ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 177
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 271
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 177 271
Entering state 355
Next token is token ']' ()
Shifting token ']' ()
Entering state 394
Reducing stack by rule 213 (line 923):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 177
Reading a token: Next token is token '+' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 176
Next token is token '+' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 175
Next token is token '+' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 174
Next token is token '+' ()
Shifting token '+' ()
Entering state 251
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 129
Reducing stack by rule 222 (line 941):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251
Entering state 177
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 271
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251 177 271
Entering state 355
Next token is token ']' ()
Shifting token ']' ()
Entering state 394
Reducing stack by rule 213 (line 923):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251
Entering state 196
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135 174 251
Entering state 335
Next token is token ';' ()
Reducing stack by rule 196 (line 894):
   $1 = nterm additive_expression ()
   $2 = token '+' ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 157 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96 157
Entering state 234
Reducing stack by rule 126 (line 701):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
parsed OK: trange.c
[AST 0]
  Function rtype=int name=main params=0
    Compound{n=3}
      Decl type=struct S name=s
        init:
          InitList{n=2}
            DesignatedChain{n=3}
              .
                field=inner
              .
                field=b
              [index]
                Int(1)
              value:
                Int(9)
            DesignatedChain{n=3}
              .
                field=inner
              .
                field=b
              [range]
                first:
                  Int(2)
                last:
                  Int(4)
              value:
                Int(7)
      Decl type=int[5] name=x
        init:
          InitList{n=2}
            DesignatedChain{n=1}
              [range]
                first:
                  Int(0)
                last:
                  Int(2)
              value:
                Int(1)
            DesignatedChain{n=1}
              [index]
                Int(4)
              value:
                Int(5)
      Return
        Binary(op=+)
          Index
            Member(.b)
              Member(.inner)
                Ident(s)
            Int(2)
          Index
            Ident(x)
            Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token ',' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Next token is token ',' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31
Entering state 75
Next token is token ',' ()
Shifting token ',' ()
Entering state 107
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107
Entering state 187
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 286
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 187
Entering state 103
Reading a token: Next token is token ';' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 75 107
Entering state 193
Reducing stack by rule 135 (line 769):
-> $$ = nterm sdecl_list ()
Stack now 0 1 31 75 107 193
Entering state 298
Next token is token ';' ()
Shifting token ';' ()
Entering state 376
Reducing stack by rule 7 (line 240):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token ',' ()
   $4 = nterm sdecl ()
   $5 = nterm sdecl_list ()
   $6 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
parsed OK: ts1.c
[AST 0]
  Decl type=int name=a
[AST 1]
  Decl type=int name=b
[AST 2]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
Starting parse
Entering state 0
Reducing stack by rule 1 (line 216):
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 70
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 31
Entering state 72
Next token is token IDENTIFIER ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token ',' ()
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 71
Entering state 103
Next token is token ',' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31
Entering state 75
Next token is token ',' ()
Shifting token ',' ()
Entering state 107
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107
Entering state 187
Next token is token '(' ()
Shifting token '(' ()
Entering state 102
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 31 75 107 187 102
Entering state 72
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 187 102
Entering state 187
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 286
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 187 102 187
Entering state 103
Reading a token: Next token is token ')' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 75 107 187 102
Entering state 188
Next token is token ')' ()
Shifting token ')' ()
Entering state 287
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 367
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 75 107 187 102 188 287 367
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 75 107 187 102 188 287 367
Entering state 400
Reading a token: Next token is token ',' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 187 102 188 287 367 400
Entering state 425
Next token is token ',' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 31 75 107 187 102 188 287 367
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 31 75 107 187 102 188 287 367
Entering state 402
Next token is token ',' ()
Shifting token ',' ()
Entering state 427
Reading a token: Next token is token KW_CHAR ()
Shifting token KW_CHAR ()
Entering state 5
Reducing stack by rule 53 (line 498):
   $1 = token KW_CHAR ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 75 107 187 102 188 287 367 402 427
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 75 107 187 102 188 287 367 402 427
Entering state 400
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 31 75 107 187 102 188 287 367 402 427 400
Entering state 72
Reading a token: Next token is token ')' ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 187 102 188 287 367 402 427 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 31 75 107 187 102 188 287 367 402 427
Entering state 439
Reducing stack by rule 112 (line 647):
   $1 = nterm fp_param_list ()
   $2 = token ',' ()
   $3 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 31 75 107 187 102 188 287 367
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 31 75 107 187 102 188 287 367
Entering state 401
Next token is token ')' ()
Shifting token ')' ()
Entering state 426
Reducing stack by rule 140 (line 781):
   $1 = token '(' ()
   $2 = nterm sdecl ()
   $3 = token ')' ()
   $4 = token '(' ()
   $5 = nterm fp_param_list_opt ()
   $6 = token ')' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 187
Entering state 103
Reading a token: Next token is token ',' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 75 107
Entering state 193
Reducing stack by rule 135 (line 769):
-> $$ = nterm sdecl_list ()
Stack now 0 1 31 75 107 193
Entering state 298
Next token is token ',' ()
Shifting token ',' ()
Entering state 375
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 193 298 375
Entering state 187
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 286
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 193 298 375 187
Entering state 103
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 75 107 193 298 375 187 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 193 298 375 187
Entering state 103
Reading a token: Next token is token ',' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 75 107 193 298 375
Entering state 409
Reducing stack by rule 136 (line 770):
   $1 = nterm sdecl_list ()
   $2 = token ',' ()
   $3 = nterm sdecl ()
-> $$ = nterm sdecl_list ()
Stack now 0 1 31 75 107 193
Entering state 298
Next token is token ',' ()
Shifting token ',' ()
Entering state 375
Reading a token: Next token is token '(' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 193 298 375
Entering state 187
Next token is token '(' ()
Shifting token '(' ()
Entering state 102
Reading a token: Next token is token '*' ()
Shifting token '*' ()
Entering state 90
Reducing stack by rule 5 (line 229):
   $1 = token '*' ()
-> $$ = nterm star_list ()
Stack now 0 1 31 75 107 193 298 375 187 102
Entering state 72
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 4 (line 225):
   $1 = nterm star_list ()
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 193 298 375 187 102
Entering state 187
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 286
Reducing stack by rule 138 (line 779):
   $1 = token IDENTIFIER ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 193 298 375 187 102 187
Entering state 103
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 189
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 177
Reading a token: Next token is token ']' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 176
Next token is token ']' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 175
Next token is token ']' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 174
Next token is token ']' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 173
Next token is token ']' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 172
Next token is token ']' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 171
Next token is token ']' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 170
Next token is token ']' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 169
Next token is token ']' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 168
Next token is token ']' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 167
Next token is token ']' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 166
Next token is token ']' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 279
Reducing stack by rule 159 (line 824):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 1 31 75 107 193 298 375 187 102 187 103 189
Entering state 288
Next token is token ']' ()
Shifting token ']' ()
Entering state 368
Reducing stack by rule 141 (line 782):
   $1 = nterm sdir ()
   $2 = token '[' ()
   $3 = nterm assignment_expression_opt ()
   $4 = token ']' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 193 298 375 187 102 187
Entering state 103
Reading a token: Next token is token ')' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 75 107 193 298 375 187 102
Entering state 188
Next token is token ')' ()
Shifting token ')' ()
Entering state 287
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 367
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1 31 75 107 193 298 375 187 102 188 287 367
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1 31 75 107 193 298 375 187 102 188 287 367
Entering state 400
Reading a token: Next token is token ')' ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31 75 107 193 298 375 187 102 188 287 367 400
Entering state 425
Next token is token ')' ()
Reducing stack by rule 113 (line 657):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
-> $$ = nterm fp_param ()
Stack now 0 1 31 75 107 193 298 375 187 102 188 287 367
Entering state 403
Reducing stack by rule 111 (line 646):
   $1 = nterm fp_param ()
-> $$ = nterm fp_param_list ()
Stack now 0 1 31 75 107 193 298 375 187 102 188 287 367
Entering state 402
Next token is token ')' ()
Reducing stack by rule 110 (line 636):
   $1 = nterm fp_param_list ()
-> $$ = nterm fp_param_list_opt ()
Stack now 0 1 31 75 107 193 298 375 187 102 188 287 367
Entering state 401
Next token is token ')' ()
Shifting token ')' ()
Entering state 426
Reducing stack by rule 140 (line 781):
   $1 = token '(' ()
   $2 = nterm sdecl ()
   $3 = token ')' ()
   $4 = token '(' ()
   $5 = nterm fp_param_list_opt ()
   $6 = token ')' ()
-> $$ = nterm sdir ()
Stack now 0 1 31 75 107 193 298 375 187
Entering state 103
Reading a token: Next token is token ';' ()
Reducing stack by rule 137 (line 775):
   $1 = nterm star_list_opt ()
   $2 = nterm sdir ()
-> $$ = nterm sdecl ()
Stack now 0 1 31 75 107 193 298 375
Entering state 409
Reducing stack by rule 136 (line 770):
   $1 = nterm sdecl_list ()
   $2 = token ',' ()
   $3 = nterm sdecl ()
-> $$ = nterm sdecl_list ()
Stack now 0 1 31 75 107 193
Entering state 298
Next token is token ';' ()
Shifting token ';' ()
Entering state 376
Reducing stack by rule 7 (line 240):
   $1 = nterm type_specifier ()
   $2 = nterm sdecl ()
   $3 = token ',' ()
   $4 = nterm sdecl ()
   $5 = nterm sdecl_list ()
   $6 = token ';' ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Next token is token KW_INT ()
Shifting token KW_INT ()
Entering state 7
Reducing stack by rule 55 (line 500):
   $1 = token KW_INT ()
-> $$ = nterm type_unit ()
Stack now 0 1
Entering state 30
Reducing stack by rule 64 (line 514):
   $1 = nterm type_unit ()
-> $$ = nterm type_specifier ()
Stack now 0 1
Entering state 31
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 3 (line 224):
-> $$ = nterm star_list_opt ()
Stack now 0 1 31
Entering state 71
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 101
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 183
Reading a token: Next token is token ')' ()
Reducing stack by rule 32 (line 411):
-> $$ = nterm parameter_type_list_opt ()
Stack now 0 1 31 71 101 183
Entering state 282
Next token is token ')' ()
Shifting token ')' ()
Entering state 363
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 96
Reading a token: Next token is token KW_RETURN ()
Shifting token KW_RETURN ()
Entering state 135
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 131
Reducing stack by rule 223 (line 942):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm primary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 178
Reducing stack by rule 211 (line 918):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 177
Reading a token: Next token is token ';' ()
Reducing stack by rule 202 (line 906):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 176
Next token is token ';' ()
Reducing stack by rule 198 (line 899):
   $1 = nterm unary_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 175
Next token is token ';' ()
Reducing stack by rule 195 (line 893):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 174
Next token is token ';' ()
Reducing stack by rule 192 (line 887):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 173
Next token is token ';' ()
Reducing stack by rule 187 (line 879):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 172
Next token is token ';' ()
Reducing stack by rule 184 (line 873):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 171
Next token is token ';' ()
Reducing stack by rule 182 (line 868):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 170
Next token is token ';' ()
Reducing stack by rule 180 (line 863):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 169
Next token is token ';' ()
Reducing stack by rule 178 (line 858):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 168
Next token is token ';' ()
Reducing stack by rule 176 (line 853):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 167
Next token is token ';' ()
Reducing stack by rule 174 (line 848):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 166
Next token is token ';' ()
Reducing stack by rule 172 (line 843):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 165
Reducing stack by rule 160 (line 828):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 164
Reducing stack by rule 156 (line 818):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 213
Next token is token ';' ()
Reducing stack by rule 155 (line 814):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 1 31 71 101 183 282 363 96 135
Entering state 212
Next token is token ';' ()
Shifting token ';' ()
Entering state 308
Reducing stack by rule 150 (line 805):
   $1 = token KW_RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 162
Reducing stack by rule 121 (line 687):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 154
Reducing stack by rule 133 (line 754):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 158
Reducing stack by rule 125 (line 700):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 157
Reading a token: Next token is token '}' ()
Reducing stack by rule 124 (line 696):
   $1 = nterm block_item_list ()
-> $$ = nterm block_item_list_opt ()
Stack now 0 1 31 71 101 183 282 363 96
Entering state 156
Next token is token '}' ()
Shifting token '}' ()
Entering state 233
Reducing stack by rule 122 (line 691):
   $1 = token '{' ()
   $2 = nterm block_item_list_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 1 31 71 101 183 282 363
Entering state 397
Reducing stack by rule 10 (line 257):
   $1 = nterm type_specifier ()
   $2 = nterm star_list_opt ()
   $3 = token IDENTIFIER ()
   $4 = token '(' ()
   $5 = nterm parameter_type_list_opt ()
   $6 = token ')' ()
   $7 = nterm compound_statement ()
-> $$ = nterm external_declaration ()
Stack now 0 1
Entering state 23
Reducing stack by rule 2 (line 218):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Stack now 0 1
Cleanup: popping nterm translation_unit ()
parsed OK: tsmart.c
[AST 0]
  Decl type=int* name=a
[AST 1]
  Decl type=int(*)(int, char*) name=fp
[AST 2]
  Function rtype=int name=main params=0
    Compound{n=1}
      Return
        Int(0)
